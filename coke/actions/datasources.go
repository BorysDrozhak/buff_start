package actions

import (
	"github.com/BorysDrozhak/buff_start/coke/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Datasource)
// DB Table: Plural (datasources)
// Resource: Plural (Datasources)
// Path: Plural (/datasources)
// View Template Folder: Plural (/templates/datasources/)

// DatasourcesResource is the resource for the Datasource model
type DatasourcesResource struct {
	buffalo.Resource
}

// List gets all Datasources. This function is mapped to the path
// GET /datasources
func (v DatasourcesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	datasources := &models.Datasources{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Datasources from the DB
	if err := q.All(datasources); err != nil {
		return errors.WithStack(err)
	}

	// Make Datasources available inside the html template
	c.Set("datasources", datasources)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("datasources/index.html"))
}

// Show gets the data for one Datasource. This function is mapped to
// the path GET /datasources/{datasource_id}
func (v DatasourcesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasource
	datasource := &models.Datasource{}

	// To find the Datasource the parameter datasource_id is used.
	if err := tx.Find(datasource, c.Param("datasource_id")); err != nil {
		return c.Error(404, err)
	}

	// Make datasource available inside the html template
	c.Set("datasource", datasource)

	return c.Render(200, r.HTML("datasources/show.html"))
}

// New renders the form for creating a new Datasource.
// This function is mapped to the path GET /datasources/new
func (v DatasourcesResource) New(c buffalo.Context) error {
	// Make datasource available inside the html template
	c.Set("datasource", &models.Datasource{})

	return c.Render(200, r.HTML("datasources/new.html"))
}

// Create adds a Datasource to the DB. This function is mapped to the
// path POST /datasources
func (v DatasourcesResource) Create(c buffalo.Context) error {
	// Allocate an empty Datasource
	datasource := &models.Datasource{}

	// Bind datasource to the html form elements
	if err := c.Bind(datasource); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(datasource)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make datasource available inside the html template
		c.Set("datasource", datasource)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("datasources/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Datasource was created successfully")

	// and redirect to the datasources index page
	return c.Redirect(302, "/datasources/%s", datasource.ID)
}

// Edit renders a edit form for a Datasource. This function is
// mapped to the path GET /datasources/{datasource_id}/edit
func (v DatasourcesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasource
	datasource := &models.Datasource{}

	if err := tx.Find(datasource, c.Param("datasource_id")); err != nil {
		return c.Error(404, err)
	}

	// Make datasource available inside the html template
	c.Set("datasource", datasource)
	return c.Render(200, r.HTML("datasources/edit.html"))
}

// Update changes a Datasource in the DB. This function is mapped to
// the path PUT /datasources/{datasource_id}
func (v DatasourcesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasource
	datasource := &models.Datasource{}

	if err := tx.Find(datasource, c.Param("datasource_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Datasource to the html form elements
	if err := c.Bind(datasource); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(datasource)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make datasource available inside the html template
		c.Set("datasource", datasource)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("datasources/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Datasource was updated successfully")

	// and redirect to the datasources index page
	return c.Redirect(302, "/datasources/%s", datasource.ID)
}

// Destroy deletes a Datasource from the DB. This function is mapped
// to the path DELETE /datasources/{datasource_id}
func (v DatasourcesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasource
	datasource := &models.Datasource{}

	// To find the Datasource the parameter datasource_id is used.
	if err := tx.Find(datasource, c.Param("datasource_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(datasource); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Datasource was destroyed successfully")

	// Redirect to the datasources index page
	return c.Redirect(302, "/datasources")
}
