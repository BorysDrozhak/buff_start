package actions

import (
	"github.com/BorysDrozhak/buff_start/coke/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Datasourcestype)
// DB Table: Plural (datasourcestypes)
// Resource: Plural (Datasourcestypes)
// Path: Plural (/datasourcestypes)
// View Template Folder: Plural (/templates/datasourcestypes/)

// DatasourcestypesResource is the resource for the Datasourcestype model
type DatasourcestypesResource struct {
	buffalo.Resource
}

// List gets all Datasourcestypes. This function is mapped to the path
// GET /datasourcestypes
func (v DatasourcestypesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	datasourcestypes := &models.Datasourcestypes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Datasourcestypes from the DB
	if err := q.All(datasourcestypes); err != nil {
		return errors.WithStack(err)
	}

	// Make Datasourcestypes available inside the html template
	c.Set("datasourcestypes", datasourcestypes)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("datasourcestypes/index.html"))
}

// Show gets the data for one Datasourcestype. This function is mapped to
// the path GET /datasourcestypes/{datasourcestype_id}
func (v DatasourcestypesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasourcestype
	datasourcestype := &models.Datasourcestype{}

	// To find the Datasourcestype the parameter datasourcestype_id is used.
	if err := tx.Find(datasourcestype, c.Param("datasourcestype_id")); err != nil {
		return c.Error(404, err)
	}

	// Make datasourcestype available inside the html template
	c.Set("datasourcestype", datasourcestype)

	return c.Render(200, r.HTML("datasourcestypes/show.html"))
}

// New renders the form for creating a new Datasourcestype.
// This function is mapped to the path GET /datasourcestypes/new
func (v DatasourcestypesResource) New(c buffalo.Context) error {
	// Make datasourcestype available inside the html template
	c.Set("datasourcestype", &models.Datasourcestype{})

	return c.Render(200, r.HTML("datasourcestypes/new.html"))
}

// Create adds a Datasourcestype to the DB. This function is mapped to the
// path POST /datasourcestypes
func (v DatasourcestypesResource) Create(c buffalo.Context) error {
	// Allocate an empty Datasourcestype
	datasourcestype := &models.Datasourcestype{}

	// Bind datasourcestype to the html form elements
	if err := c.Bind(datasourcestype); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(datasourcestype)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make datasourcestype available inside the html template
		c.Set("datasourcestype", datasourcestype)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("datasourcestypes/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Datasourcestype was created successfully")

	// and redirect to the datasourcestypes index page
	return c.Redirect(302, "/datasourcestypes/%s", datasourcestype.ID)
}

// Edit renders a edit form for a Datasourcestype. This function is
// mapped to the path GET /datasourcestypes/{datasourcestype_id}/edit
func (v DatasourcestypesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasourcestype
	datasourcestype := &models.Datasourcestype{}

	if err := tx.Find(datasourcestype, c.Param("datasourcestype_id")); err != nil {
		return c.Error(404, err)
	}

	// Make datasourcestype available inside the html template
	c.Set("datasourcestype", datasourcestype)
	return c.Render(200, r.HTML("datasourcestypes/edit.html"))
}

// Update changes a Datasourcestype in the DB. This function is mapped to
// the path PUT /datasourcestypes/{datasourcestype_id}
func (v DatasourcestypesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasourcestype
	datasourcestype := &models.Datasourcestype{}

	if err := tx.Find(datasourcestype, c.Param("datasourcestype_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Datasourcestype to the html form elements
	if err := c.Bind(datasourcestype); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(datasourcestype)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make datasourcestype available inside the html template
		c.Set("datasourcestype", datasourcestype)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("datasourcestypes/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Datasourcestype was updated successfully")

	// and redirect to the datasourcestypes index page
	return c.Redirect(302, "/datasourcestypes/%s", datasourcestype.ID)
}

// Destroy deletes a Datasourcestype from the DB. This function is mapped
// to the path DELETE /datasourcestypes/{datasourcestype_id}
func (v DatasourcestypesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Datasourcestype
	datasourcestype := &models.Datasourcestype{}

	// To find the Datasourcestype the parameter datasourcestype_id is used.
	if err := tx.Find(datasourcestype, c.Param("datasourcestype_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(datasourcestype); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Datasourcestype was destroyed successfully")

	// Redirect to the datasourcestypes index page
	return c.Redirect(302, "/datasourcestypes")
}
